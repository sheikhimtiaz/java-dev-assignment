/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package socket.server;

import socket.server.io.RequestObject;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.ServerSocket;
import java.net.Socket;

public class App {
    private static final int PORT = 9876;
    private static final String EXIT = "EXIT";

    public void startServerAndAcceptRequest() throws IOException, ClassNotFoundException {
        ServerSocket server = new ServerSocket(PORT);
        System.out.println("Starting socket server");

        while (true) {
            System.out.println("Waiting for the client request");
            Socket socket = server.accept();
            ObjectInputStream objectInputStream = new ObjectInputStream(socket.getInputStream());
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(socket.getOutputStream());
//            String message = (String) objectInputStream.readObject();
            RequestObject requestObject = (RequestObject) objectInputStream.readObject();
            System.out.println("Message from client: " + requestObject);

            if (requestObject.method.equalsIgnoreCase(EXIT))
                break;

            int result = -1;
            try {
                result = invokeMethodWithManagerName(requestObject);
                objectOutputStream.writeObject("Hi client : " + result);
            } catch (NoSuchMethodException e) {
                objectOutputStream.writeObject("Hi client : " + "No Such Method Exception");
                e.printStackTrace();
            } catch (InvocationTargetException e) {
                objectOutputStream.writeObject("Hi client : " + "Invocation Target Exception");
                e.printStackTrace();
            } catch (InstantiationException e) {
                objectOutputStream.writeObject("Hi client : " + "Instantiation Exception");
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                objectOutputStream.writeObject("Hi client : " + "Illegal Access Exception");
                e.printStackTrace();
            }

            objectInputStream.close();
            objectOutputStream.close();
        }
        System.out.println("Shutting down socket server");
        server.close();
    }


    private int invokeMethodWithManagerName(RequestObject requestObject) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        Class<?> c = Class.forName("socket.server.manager."+requestObject.managerName);
        Constructor<?> cons = c.getConstructor();
        Object object = cons.newInstance();

        Method method = object.getClass().getMethod(requestObject.method, int.class);

        return (int)method.invoke(object, Integer.parseInt((String)requestObject.args.get("n")));
    }


    public static void main(String[] args) throws IOException, ClassNotFoundException{
        new App().startServerAndAcceptRequest();
    }
}
