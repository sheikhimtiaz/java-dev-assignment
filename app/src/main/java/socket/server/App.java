/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package socket.server;

import socket.server.io.RequestObject;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class App {
    private static final int PORT = 9876;
    private static final String EXIT = "EXIT";

    public void startServerAndAcceptRequest() throws IOException, ClassNotFoundException {
        ServerSocket server = null;
        try{
            server = new ServerSocket(PORT);
            System.out.println("Starting socket server");
            int availableProcessors = Runtime.getRuntime().availableProcessors();
            ExecutorService executorServiceIOBound = Executors.newFixedThreadPool(200);
            ExecutorService executorServiceCPUBound = Executors.newFixedThreadPool(availableProcessors);

            while (true) {
                System.out.println("Waiting for the client request");
                Socket socket = server.accept();
                ClientHandler clientHandler = new ClientHandler(socket, executorServiceCPUBound);
//                Thread thread = new Thread(clientHandler);
//                thread.start();
                executorServiceIOBound.submit(clientHandler);
            }
        } catch (Exception e){
            e.printStackTrace();
        } finally {
            System.out.println("Shutting down socket server");
            if(server!=null) server.close();
        }
    }

    public static void main(String[] args) throws IOException, ClassNotFoundException{
        new App().startServerAndAcceptRequest();
    }
}
